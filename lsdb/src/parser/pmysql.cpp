#line 2 "pmysql.cpp"

#line 4 "pmysql.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 1
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yynoreturn yy_fatal_error (yyconst char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 271
#define YY_END_OF_BUFFER 272
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[1453] =
    {   0,
      272,  270,  271,  269,  270,  271,  269,  271,  236,  270,
      271,  270,  271,  264,  270,  271,  236,  270,  271,  236,
      270,  271,  270,  271,  236,  270,  271,  236,  270,  271,
      236,  270,  271,  219,  270,  271,  219,  270,  271,  270,
      271,  243,  270,  271,  239,  270,  271,  241,  270,  271,
      270,  271,  254,  270,  271,  254,  270,  271,  254,  270,
      271,  254,  270,  271,  254,  270,  271,  254,  270,  271,
      254,  270,  271,  254,  270,  271,  254,  270,  271,  254,
      270,  271,  254,  270,  271,  254,  270,  271,  254,  270,
      271,  254,  270,  271,  254,  270,  271,  254,  270,  271,

      254,  270,  271,  254,  270,  271,  254,  270,  271,  254,
      270,  271,  254,  270,  271,  254,  270,  271,  254,  270,
      271,  254,  270,  271,  254,  270,  271,  254,  270,  271,
      270,  271,  236,  270,  271,  268,  271,  268,  271,  254,
      270,  271,  244,  231,  229,  264,  237,  230,  228,  219,
      221,  266,  220,  248,  246,  242,  245,  240,  247,  257,
    16647,16646,  254,  254,  254,  254,    8,  254,  254,  254,
      254,  254,  254,   18,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,   85,  254,  254,   87,  254,   96,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  130,  254,  254,  135,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  190,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  256,  238,  267,  254,  229,  228,  265,  220,
      234,  222,  233,  261,16647, 8455,16646, 8454,    1,  254,
        2,  254,  254,  254,    6,  254,    7,  254,    9,  254,
      254,  254,  254,  254,  254,   15,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,   48,  254,  254,  254,  254,  254,  254,   58,
      254,  254,  254,  254,  254,  254,   65,  254,  254,  254,
      254,  254,  254,  254,  254,   73,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
       93,  254,  254,  254,   99,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  123,  254,  254,  126,  254,  254,  254,  254,  254,
      254,  137,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  254,  254,  254,  254,  164,  254,  254,  254,  254,
      254,  254,  254,  171,  254,  178,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  200,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  214,  254,  254,
      254,  255,    5,    6,  254,  229,  228,  265,  224,  223,
      258,  260,  259,  254,  254,  254,  235,  254,  254,  254,
      254,   16,  254,   17,  254,   19,  254,  254,   21,  254,
      254,   23,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,   42,  254,  254,

      254,  254,  254,  254,  254,   53,  254,  254,  254,  254,
       32,   60,  254,   61,  254,   62,  254,   63,  254,   66,
      254,  254,  254,  218,  254,  254,  254,  254,  254,  254,
      254,   76,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  188,  254,  166,  254,   93,
      254,   13,  254,  254,   95,  254,  254,   98,  254,  100,
      254,  101,  254,  254,  254,  104,  254,  105,  254,  254,
      254,  108,  254,  254,  111,  254,  112,  254,  115,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  128,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  145,  254,  147,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  165,  254,  254,  167,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      184,  254,  185,  254,  186,  254,  254,  254,  254,  254,
      225,  254,  193,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  209,  254,  254,
      254,  212,  254,  254,  232,  215,  254,  254,    3,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,   24,
      254,  254,  254,  254,  254,  254,  254,  254,  253,  254,

      254,   34,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  227,  254,   71,  254,   72,  254,
       74,  254,  254,  254,   78,  254,   79,  254,  254,  254,
      254,  254,   99,  254,  254,   89,  254,   90,  254,  254,
      254,  254,  254,  254,  254,  103,  254,  106,  254,  107,
      254,  254,  254,  254,  254,  117,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  136,  254,  138,
      254,  254,  254,  254,  254,  143,  254,  144,  254,  146,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  158,  254,  149,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  181,  254,  254,  254,  254,  254,  254,
      254,  254,  250,  194,  254,  254,  254,  254,  254,  254,
      199,  254,  201,  254,  254,  254,  205,  254,  254,  254,
      254,  210,  254,  211,  254,  213,  254,  254,  254,  254,
      254,   11,  254,  254,   14,  254,  254,   22,  254,  254,
      254,   26,  254,  254,  254,  254,  254,  254,   33,  254,
      254,   39,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,   52,  254,  254,  254,  254,   59,

      254,   64,  254,  254,   68,  254,  254,   72,  254,  254,
      254,   80,  254,  254,  254,  254,   86,  254,   88,  254,
      254,   92,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  129,  254,  254,
      254,  133,  254,  254,  254,  254,  254,  254,  149,  254,
      254,  151,  254,  152,  254,  254,  254,  254,  156,  254,
      157,  254,  159,  254,  254,  161,  254,  254,  254,  254,
      168,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      195,  254,  254,  196,  254,  254,  198,  254,  254,  254,

      205,  254,  254,  254,  254,  254,  254,    4,  254,  254,
       12,  254,   20,  254,  254,   25,  254,   27,  254,  254,
      254,  254,   31,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,   48,  254,   49,  254,   50,  254,   51,
      254,  254,  254,  254,   67,  254,   70,  254,   75,  254,
      254,  254,  254,  254,  254,   93,  254,  254,   97,  254,
      102,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  125,  254,  254,   48,  254,  254,  254,  139,
      254,  254,  141,  254,  254,  254,  150,  254,  153,  254,
      154,  254,  254,  254,  254,  254,  254,  169,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  249,  254,
      254,  254,  254,  254,  254,  192,  254,  226,  254,  254,
      254,  254,  254,  207,  254,  208,  254,  254,  254,  254,
      254,  254,  254,   30,  254,  254,   40,  254,   43,  254,
      254,  254,   44,  254,  254,  254,  254,   54,  254,  254,
       56,  254,   77,  254,  254,  254,  254,  254,  254,   94,
      254,  254,  113,  254,  114,  254,  254,  254,  254,  254,
      254,  254,  254,  124,  254,  254,  132,  254,  254,  254,
      254,  254,  155,  254,  254,  254,  254,  170,  254,  254,
      173,  254,  254,  254,  254,  254,  179,  254,  254,  254,

      254,  254,  254,  189,  254,  191,  254,  197,  254,  202,
      254,  203,  254,  254,  254,  254,  217,  254,  254,   23,
      254,   28,  254,  254,  254,  254,  254,   41,  254,  251,
      252,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  109,  254,  254,  254,  119,  254,  254,  119,  254,
      254,  254,  254,  254,  140,  254,  142,  254,  254,  254,
      162,  254,  163,  254,  254,  254,  254,  254,  254,  254,
      254,  182,  254,  254,  187,  254,  254,  206,  254,  254,
      254,  254,   29,  254,  254,  254,  254,  254,   46,  254,
       47,  254,  254,  254,  254,  254,  254,  254,  254,  254,

      254,  118,  254,  120,  254,  254,  254,   69,  254,  134,
      254,  148,  254,  254,  254,  174,  254,  254,  254,  254,
      254,  183,  254,  254,  254,  216,  254,  254,  254,  254,
      254,  254,  254,   57,  254,  254,  254,   83,  254,   84,
      254,   91,  254,  254,  254,  254,  254,  254,  254,  254,
      254,  254,  254,  254,  254,  254,  254,   35,  254,   36,
      254,   38,  254,  254,  254,  254,  254,  254,  116,  254,
      254,  254,  254,  131,  254,  172,  254,  254,  254,  254,
      254,  254,  207,  254,  254,  254,  254,   55,  254,   81,
      254,  254,  254,  254,  122,  254,  254,  254,  254,  254,

      254,  180,  254,  204,  254,   10,  254,  254,  254,  254,
      110,  254,  254,  254,  254,  175,  254,  254,  254,  254,
       45,  254,  254,  254,  254,  254,  254,  254,  254,   82,
      254,  254,  254,  254,  254,  177,  254,   37,  254,  254,
      254,  254,  254,  121,  254,  127,  254,  160,  254,  254,
      176,  254
    } ;

static yyconst flex_int16_t yy_accept[1187] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    4,    7,
        9,   12,   14,   17,   20,   23,   25,   28,   31,   34,
       37,   40,   42,   45,   48,   51,   53,   56,   59,   62,
       65,   68,   71,   74,   77,   80,   83,   86,   89,   92,
       95,   98,  101,  104,  107,  110,  113,  116,  119,  122,
      125,  128,  131,  133,  136,  138,  140,  143,  144,  144,
      145,  146,  146,  147,  148,  148,  149,  150,  150,  150,
      150,  151,  152,  153,  154,  154,  154,  154,  155,  156,
      157,  158,  159,  160,  160,  161,  162,  163,  164,  165,
      166,  167,  169,  170,  170,  171,  172,  173,  174,  176,

      177,  178,  179,  180,  181,  182,  183,  184,  185,  186,
      187,  188,  189,  190,  191,  192,  193,  194,  195,  196,
      197,  198,  199,  200,  201,  202,  204,  205,  207,  209,
      210,  211,  212,  213,  214,  215,  216,  217,  218,  219,
      220,  221,  222,  223,  225,  226,  228,  229,  230,  231,
      232,  233,  234,  235,  236,  237,  238,  239,  240,  241,
      242,  243,  244,  245,  246,  247,  248,  249,  251,  252,
      253,  254,  255,  256,  257,  258,  259,  260,  260,  261,
      262,  263,  263,  264,  264,  265,  266,  267,  267,  267,
      268,  268,  268,  268,  269,  269,  270,  270,  271,  271,

      272,  272,  273,  274,  274,  275,  276,  277,  278,  279,
      281,  283,  284,  285,  287,  289,  291,  292,  292,  293,
      294,  295,  296,  298,  299,  300,  301,  302,  303,  304,
      305,  306,  307,  308,  309,  310,  311,  312,  313,  315,
      316,  317,  318,  319,  320,  322,  323,  324,  325,  326,
      327,  329,  330,  331,  332,  333,  334,  335,  336,  338,
      339,  340,  341,  342,  343,  344,  345,  346,  347,  348,
      349,  350,  351,  353,  354,  355,  357,  358,  359,  360,
      361,  362,  363,  364,  365,  366,  367,  368,  369,  370,
      371,  372,  374,  375,  377,  378,  379,  380,  380,  381,

      382,  384,  385,  386,  387,  388,  389,  390,  391,  392,
      393,  394,  395,  396,  397,  398,  399,  400,  401,  402,
      403,  404,  405,  406,  408,  409,  410,  411,  412,  413,
      414,  416,  418,  419,  420,  421,  422,  423,  424,  425,
      426,  427,  428,  429,  430,  431,  432,  433,  434,  435,
      436,  437,  438,  440,  441,  442,  443,  444,  445,  446,
      447,  448,  448,  450,  451,  452,  453,  456,  456,  457,
      457,  458,  459,  459,  460,  460,  461,  462,  463,  464,
      465,  466,  467,  468,  469,  470,  471,  472,  474,  476,
      478,  479,  481,  482,  484,  485,  486,  487,  488,  489,

      490,  491,  492,  493,  494,  495,  496,  497,  498,  500,
      501,  502,  503,  504,  505,  506,  508,  509,  510,  511,
      514,  516,  518,  520,  522,  523,  524,  526,  527,  528,
      529,  530,  531,  532,  534,  535,  536,  537,  538,  539,
      540,  541,  542,  543,  544,  545,  546,  548,  550,  552,
      554,  555,  557,  558,  560,  562,  564,  565,  566,  568,
      570,  571,  572,  574,  575,  577,  579,  581,  582,  583,
      584,  585,  586,  587,  588,  588,  589,  591,  592,  593,
      593,  594,  595,  596,  597,  598,  599,  600,  601,  602,
      604,  606,  607,  608,  609,  610,  611,  612,  613,  614,

      615,  616,  617,  618,  619,  620,  621,  622,  623,  625,
      626,  628,  629,  630,  631,  632,  633,  634,  635,  636,
      637,  638,  639,  640,  641,  643,  645,  647,  648,  649,
      650,  651,  653,  655,  656,  657,  658,  659,  660,  661,
      662,  663,  664,  665,  666,  667,  668,  670,  671,  672,
      674,  675,  676,  678,  679,  679,  679,  679,  679,  681,
      682,  683,  684,  685,  686,  687,  688,  689,  690,  692,
      693,  694,  695,  696,  697,  698,  699,  701,  702,  704,
      705,  706,  707,  708,  709,  710,  711,  712,  713,  714,
      715,  716,  717,  718,  719,  720,  721,  722,  723,  724,

      725,  727,  729,  731,  733,  734,  735,  737,  739,  740,
      741,  742,  743,  745,  746,  748,  750,  751,  752,  753,
      754,  755,  756,  758,  760,  762,  763,  764,  765,  766,
      768,  769,  770,  771,  772,  773,  773,  774,  775,  776,
      776,  777,  778,  780,  782,  783,  784,  785,  786,  788,
      790,  792,  793,  794,  795,  796,  797,  798,  799,  800,
      801,  802,  804,  806,  807,  808,  809,  810,  811,  812,
      813,  814,  815,  816,  817,  818,  819,  820,  821,  822,
      823,  824,  826,  827,  828,  829,  830,  831,  832,  833,
      834,  836,  837,  838,  839,  840,  841,  843,  845,  846,

      847,  849,  850,  851,  852,  854,  856,  858,  859,  860,
      861,  862,  864,  865,  867,  868,  870,  871,  872,  874,
      875,  876,  877,  878,  879,  881,  882,  884,  885,  886,
      887,  888,  889,  890,  891,  892,  893,  894,  895,  897,
      898,  899,  900,  902,  904,  905,  907,  908,  910,  911,
      912,  914,  915,  916,  917,  919,  921,  922,  924,  925,
      926,  927,  928,  929,  930,  931,  932,  933,  934,  935,
      936,  937,  937,  938,  940,  941,  941,  942,  944,  945,
      946,  947,  948,  949,  951,  952,  954,  956,  957,  958,
      959,  961,  963,  965,  966,  968,  969,  970,  971,  973,

      974,  975,  976,  977,  978,  979,  980,  981,  982,  983,
      984,  985,  986,  987,  988,  989,  990,  991,  993,  994,
      996,  997,  999, 1000, 1001, 1003, 1004, 1005, 1006, 1007,
     1008, 1010, 1011, 1013, 1015, 1016, 1018, 1020, 1021, 1022,
     1023, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033,
     1034, 1036, 1038, 1040, 1042, 1043, 1044, 1045, 1047, 1049,
     1051, 1052, 1053, 1054, 1055, 1056, 1058, 1059, 1061, 1063,
     1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
     1075, 1075, 1076, 1078, 1078, 1079, 1080, 1082, 1083, 1085,
     1086, 1087, 1089, 1091, 1093, 1094, 1095, 1096, 1097, 1098,

     1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
     1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1120, 1121,
     1122, 1123, 1124, 1126, 1128, 1129, 1130, 1131, 1132, 1133,
     1134, 1136, 1137, 1139, 1141, 1142, 1143, 1145, 1146, 1147,
     1148, 1150, 1151, 1153, 1155, 1156, 1157, 1158, 1159, 1160,
     1162, 1163, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1173,
     1174, 1176, 1176, 1177, 1177, 1179, 1180, 1181, 1182, 1183,
     1185, 1186, 1187, 1188, 1190, 1191, 1193, 1194, 1195, 1196,
     1197, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1208, 1210,
     1212, 1214, 1215, 1216, 1217, 1219, 1220, 1222, 1224, 1225,

     1226, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236,
     1237, 1238, 1239, 1240, 1241, 1242, 1244, 1245, 1246, 1248,
     1249, 1251, 1252, 1253, 1253, 1254, 1254, 1255, 1257, 1259,
     1260, 1261, 1263, 1265, 1266, 1267, 1268, 1269, 1270, 1271,
     1272, 1274, 1275, 1277, 1278, 1280, 1281, 1282, 1283, 1285,
     1286, 1287, 1288, 1289, 1291, 1293, 1294, 1295, 1296, 1297,
     1298, 1299, 1300, 1301, 1302, 1304, 1306, 1307, 1308, 1309,
     1310, 1310, 1312, 1314, 1315, 1316, 1318, 1319, 1320, 1321,
     1322, 1324, 1325, 1326, 1328, 1329, 1330, 1331, 1332, 1333,
     1334, 1336, 1337, 1338, 1340, 1342, 1344, 1345, 1346, 1347,

     1348, 1349, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
     1357, 1358, 1360, 1362, 1364, 1365, 1366, 1367, 1368, 1369,
     1371, 1372, 1373, 1374, 1375, 1376, 1378, 1379, 1380, 1381,
     1382, 1383, 1385, 1386, 1387, 1388, 1390, 1392, 1393, 1394,
     1395, 1397, 1398, 1399, 1400, 1401, 1402, 1404, 1406, 1408,
     1409, 1410, 1411, 1413, 1414, 1415, 1416, 1418, 1419, 1420,
     1421, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1432,
     1433, 1434, 1435, 1436, 1438, 1440, 1441, 1442, 1443, 1444,
     1446, 1448, 1450, 1451, 1453, 1453
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    7,    8,    9,   10,   11,
        8,   12,   13,    8,   14,   15,   16,   17,   18,   19,
       20,   21,   20,   20,   20,   22,   20,   23,    8,   24,
       25,   26,    1,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
        1,   54,    1,    8,   55,   56,   57,   58,   59,   60,

       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
       81,   82,    1,   83,    1,    8,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[84] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    1,    4,    1,    6,    6,    6,    6,
        6,    6,    1,    1,    1,    1,    1,    6,    6,    6,
        6,    6,    6,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    1,    7,    8,    6,    6,    6,    6,
        6,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    1
    } ;

static yyconst flex_uint16_t yy_base[1206] =
    {   0,
        0,    0,  751,  741,   56,   57,  740, 2591, 2591, 2591,
      692,   83,    0, 2591,  675,   84,   78,   84,  658,  124,
      100,  624,   65, 2591,   82,  106,  109,  155,  148,  182,
      203,  213,   78,  138,  252,   83,   98,  230,  260,  252,
      234,  125,   81,  271,  311,  305,  348,  103,  299,  158,
      103,  117,  235,  565, 2591,  628,  359, 2591,  203, 2591,
      628,  210,    0, 2591,  178, 2591,  619,  266,  576,  391,
      420,  426, 2591,  442,   92,  458,    0, 2591, 2591, 2591,
     2591, 2591, 2591,  566,  394,  555,  501,    0,  141,  309,
      437,  162,  164,  109,  305,  449,  175,  187,    0,  357,

      317,  445,  360,  223,  448,  487,  424,  320,  351,  373,
      396,  382,  461,  423,  465,  430,  459,  465,  465,  469,
      477,  499,  474,  494,  483,    0,  491,  533,    0,  510,
      507,  492,  508,  520,  527,  557,  507,  528,  550,  553,
      539,  545,  550,  316,  554,  571,  558,  590,  561,  575,
      634,  578,  581,  584,  617,  582,  597,  602,  631,  598,
      606,  637,  621,  628,  650,  637,  659,    0,  677,  700,
      672,  686,  678,  676,  684,  676,  690,    0,  682,  705,
      690,  754, 2591,  488, 2591, 2591,  730,  262,  412,  451,
      768,  179,  738,  769,  771,    0,  780,  795,  815,  343,

      821,  827,    0,  232, 2591,  302, 2591,  411, 2591,    0,
        0,  727,  727,    0,    0,    0,  734,  767,  736,  730,
      753,  763,    0,  792,  789,  787,  822,  816,  800,  812,
      818,  845,  823,  838,  821,  823,  842,  433,  836,  843,
      845,  848,  847,  835,    0,  855,  842,  849,  874,  878,
        0,  872,  887,  872,  877,  876,  894,  897,  896,  887,
      890,  889,  883,  896,  898,  889,  893,  904,  901,  908,
      894,  911,  955,  901,  908,  904,  913,  936,  923,  948,
      946,  951,  953,  960,  952,  946,  396,  960,  955,  961,
      945,  958,  947,  548,  950,  962,  973, 1001,  970,  975,

     1005,  980,  985,  998,  999, 1010, 1010, 1010, 1011, 1012,
     1017, 1014,  999, 1001, 1002, 1009, 1017, 1017, 1017, 1016,
     1027, 1014, 1035,    0, 1014, 1026, 1036, 1055, 1039, 1060,
     1059,    0, 1050, 1068, 1052, 1060, 1057, 1061, 1055, 1062,
     1072, 1054, 1071, 1076, 1076, 1069, 1079, 1072, 1075, 1082,
     1094, 1092,    0, 1100,  394, 1095, 1119, 1112, 1105, 1119,
     1109,  423,    0, 1113, 1117, 2591,    0, 1155, 1156,  809,
     1152,    0, 1146, 1172, 1194, 1200, 2591, 2591, 2591, 1124,
     1122,  361, 2591, 1130, 1144, 1138, 1150,    0,    0,    0,
     1168,    0, 1163, 1171, 1163, 1174, 1167, 1191, 1191, 1182,

     1196, 1201, 1187, 1188, 1191, 1206, 1197, 1211, 1194, 1207,
     1203, 1216, 1197, 1194, 1201, 1205, 1206, 1218, 1216,    0,
        0,    0, 1221,    0, 1216, 1213,    0, 1237, 1246, 1246,
     1238, 1255, 1254,    0, 1244, 1245, 1250, 1254,  351,  316,
     1251, 1246, 1259, 1254, 1253, 1260,    0,    0,    0,    0,
     1268,    0, 1275,    0,    0,    0, 1268, 1274,    0,    0,
     1261, 1263,    0, 1272,    0, 1289,    0, 1269, 1280, 1269,
     1284, 1292, 1310, 1300, 1346, 1305,    0, 1319, 1308, 1306,
     1315, 1311, 1313, 1323, 1324, 1333, 1330, 1331, 1326, 1320,
        0, 1322, 1318, 1342, 1331, 1345, 1347, 1340, 1332, 1336,

     1356, 1350, 1369, 1355, 1367, 1379, 1375, 1367,    0, 1374,
        0, 1374, 1379, 1380, 1366, 1371, 1391, 1404, 1373, 1386,
     1377, 1393, 1385, 1392,    0,    0, 1383, 1419, 1392, 1401,
      354,    0,    0, 1395, 1391, 1410, 1429, 1427, 1420, 1437,
     1436, 1440, 1440, 1437, 1439, 1439,    0, 1444, 1445,    0,
     1446, 2591,  275, 1447, 1477, 1478, 1475, 1476,    0, 1436,
     1455, 1460, 1461, 1447, 1445, 1477, 1478, 1481,    0, 1465,
     1472, 1473, 1468, 1472, 1478, 1479,    0, 1493,    0, 1486,
     1483, 1505, 1498, 1519, 1493, 1502, 1513, 1521, 1505, 1512,
     1520, 1523, 1522, 1519, 1519, 1529, 1533, 1536, 1523, 1534,

        0,    0,  617,    0, 1537, 1540,    0,    0, 1539, 1532,
     1537, 1550,    0, 1553,    0,    0, 1540, 1544, 1560, 1544,
     1549, 1562,    0,    0,    0, 1558, 1568, 1576, 1564,    0,
     1570, 1581, 1584, 1581, 1590, 1568, 1587, 1579, 1590, 1584,
     1592, 1588,    0,    0, 1591, 1585, 1588, 1604,    0,    0,
        0, 1608, 1598, 1597, 1612, 1602, 1620, 1606, 1618, 1620,
     1631,    0,    0, 1622, 1635, 1620, 1621, 1643, 1638, 1643,
     1648, 1644, 1651, 1654, 1639, 1649, 1658, 1647, 1652, 1655,
     1646,    0, 1648, 1657, 1652, 1660, 1670, 1671, 1676, 2591,
        0, 1677, 1662, 1681, 1680, 1691,    0,    0, 1696, 1689,

     1680, 1688, 1704, 1692,    0,    0,    0, 1694, 1699, 1707,
     1699,    0, 1701,    0, 1711,    0, 1697, 1713,    0, 1699,
     1711, 1721, 1703, 1709,    0, 1710,    0, 1713, 1720, 1734,
     1718, 1719, 1740, 1747, 1740, 1750, 1736, 1753,    0, 1758,
     1754, 1761,    0,    0, 1761,    0, 1752,    0, 1756, 1747,
        0, 1755, 1765, 1770,    0,    0, 1767,    0, 1759, 1777,
     1775, 1775, 1778, 1773, 1766, 1782, 1806, 1787,  271, 1793,
     1789, 1801, 1792,    0, 1810, 1802, 1792, 1820, 1817, 1814,
     1799, 1807, 1815,    0, 1826,    0,    0, 1827, 1828, 1831,
        0,    0,    0,  269,    0, 1826, 1816, 1824,    0, 1828,

     1836, 1841, 1828, 1835, 1847, 1844, 1858, 1852, 1860, 1887,
     1869, 1871, 1872, 1856, 1855, 1866, 1863,    0, 1868,    0,
     1879,    0, 1866, 1874,    0, 1888, 1872, 1884, 1877, 1881,
        0, 1891,    0,    0, 1893,    0,    0, 1885, 1894, 1899,
        0,  210, 1901, 1902, 1908, 1912, 1899, 1906, 1905, 1913,
        0,    0,    0,    0, 1925, 1917, 1914,    0,    0,    0,
     1917, 1929, 1936, 1937, 1922,    0, 1932,    0,    0, 1932,
     1945, 1928, 1934, 1939, 1938, 1949, 1942, 1945, 1942,    0,
     1943, 1960,    0, 1961, 1967, 1963,    0, 1967,    0, 1966,
     1983,    0,    0,    0, 1968, 1976, 1970, 1980, 1976,    0,

     1994, 1982, 1995, 1993,  193, 2000, 1993, 1999, 1987, 2591,
     1994, 1991, 1990, 1999, 1994, 2009,    0,    0, 2015, 2015,
     2017, 2005, 2027,    0, 2016, 2021, 2022, 2024, 2030, 2032,
        0, 2043, 2031,    0,  217,  187,    0, 2038, 2034, 2041,
        0, 2047, 2040,    0, 2045, 2043, 2044, 2051, 2058,    0,
     2063,    0,    0, 2052, 2057, 2054, 2053, 2058, 2071, 2076,
        0, 2066,  116, 2085,    0, 2079, 2084, 2095, 2097,    0,
     2095, 2100, 2090,    0, 2091,    0, 2098, 2095,  112, 2102,
        0,   96, 2109, 2093, 2114, 2105,    0,    0,    0,    0,
     2103, 2098, 2121, 2105,    0, 2121,    0,    0, 2108, 2129,

     2123, 2116,    0, 2591, 2591, 2117, 2133, 2135, 2125, 2131,
     2131, 2141, 2138, 2146, 2140, 2144, 2157, 2167,    0, 2150,
        0, 2168, 2169, 2155, 2156, 2176, 2154,    0,    0, 2161,
     2178,    0,    0, 2173, 2176, 2179, 2180,   92, 2178,  125,
        0, 2186,    0, 2173,    0, 2174, 2188, 2184,    0, 2182,
     2191, 2202, 2209,    0,    0, 2196, 2195, 2211, 2202, 2219,
     2223, 2223, 2209, 2210,    0,    0, 2214, 2219, 2591, 2220,
     2217,    0,    0, 2220, 2224,    0, 2221, 2226, 2224, 2229,
        0, 2245, 2243,    0, 2246, 2247, 2249, 2237, 2257, 2253,
        0, 2245, 2267,    0,    0,    0, 2273, 2251, 2263, 2265,

       78, 2277, 2270, 2272, 2266, 2267, 2285, 2283, 2280, 2277,
     2282,    0, 2278,    0, 2283, 2296, 2275, 2299, 2291,    0,
     2287, 2305, 2308, 2591, 2293,    0, 2301, 2304, 2301, 2309,
     2314,    0, 2312, 2314, 2322,    0,    0, 2322, 2324, 2338,
        0, 2335, 2340, 2326, 2344, 2329,    0,    0,    0, 2350,
     2349, 2340,    0, 2352, 2342, 2354,    0,   73, 2346, 2347,
        0, 2358, 2349, 2355, 2353, 2352, 2351, 2360,    0, 2364,
     2366, 2374, 2375,    0,    0, 2388, 2387, 2391, 2375,    0,
        0,    0, 2382,    0, 2591, 2457, 2465, 2473, 2481, 2487,
     2490, 2497, 2504, 2512,  118, 2520, 2528, 2536,  106, 2543,

     2550, 2558, 2566, 2574, 2582
    } ;

static yyconst flex_int16_t yy_def[1206] =
    {   0,
     1185,    1, 1186, 1186,    1,    1, 1185, 1185, 1185, 1185,
     1185, 1187, 1188, 1185, 1185, 1189, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1190, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1192, 1185, 1185, 1185, 1191, 1185, 1187, 1185,
     1185, 1193, 1188, 1185, 1189, 1185, 1185, 1194, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1195, 1185, 1185, 1185,
     1185, 1185, 1185, 1196, 1190, 1197, 1198, 1191, 1191, 1191,
     1191, 1191, 1191, 1185, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1199, 1191, 1191,
     1191, 1192, 1185, 1200, 1185, 1185, 1191, 1201, 1187, 1187,
     1193, 1202, 1189, 1189, 1194, 1203, 1185, 1185, 1185, 1185,

     1185, 1185, 1195, 1196, 1185, 1197, 1185, 1198, 1185, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1185, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1185, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1199, 1191, 1191, 1191, 1185, 1191, 1204, 1201, 1205,
     1202, 1203, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1191,
     1191, 1191, 1185, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1185, 1191, 1191, 1191, 1191, 1185,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1185, 1191, 1191, 1201, 1204, 1202, 1205, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1185, 1191, 1191, 1191, 1185,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1185,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1185, 1191, 1191, 1191, 1185, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1185, 1191, 1191, 1185, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1185,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1185, 1191, 1185, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1191, 1191, 1185, 1185, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1185, 1191, 1185, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1185, 1191,
     1185, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,

     1191, 1185, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1185, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191, 1191,
     1191, 1191, 1191, 1191,    0, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,

     1185, 1185, 1185, 1185, 1185
    } ;

static yyconst flex_uint16_t yy_nxt[2675] =
    {   0,
        8,    9,   10,   11,   12,   13,    8,   14,   15,   16,
       14,   14,   14,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   52,    8,    8,   53,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   54,   57,   57,   60,   66,   61,   79,   80,
       81,   69,   70,   67,   71,   71,   71,   71,   71,   71,

       72,   72,   72,   72,   72,   72,   82,   83,  200,  200,
       84,  362,   57,   57,   74,   86,   71,   71,   71,   71,
       71,   71,  122,  203,  131,  218,  218, 1166,  150,  132,
      174,   76, 1123,  133,  180,  910,   62,   68,   74,   89,
       71,   71,   71,   71,   71,   71, 1079,   90,  181,   91,
     1039,  122,   75,  131,   92,   76,   93,  150,  132,  174,
       76,   87,  133,  180,   94,  123, 1037,  178,   89,  148,
     1025,  210,  149,  124,   77,  100,   90,  181,   91,  125,
       66,   75,  101,   92,   76,   93,   95,   67,   67,  102,
       96,  216,  103,   97,  123,  104,   98, 1005,  148,  179,

      210,  149,  124,   77,  100,   60,   99,   61,  125,  105,
      217,  101,   60,  106,  190,   95,  224,  107,  102,   96,
      216,  103,   97,  108,  104,   98,  109, 1004,  179,  110,
      111,   68,  370,  225,  205,   99,  377,  183,  105,  217,
      116,  112,  106,  113,  117,  224,  107,  978,  114,  184,
      184,  118,  108,  115,  119,  109,   62,  120,  110,  111,
      121,  134,  225,  191,  932,  135,   61,  236,   66,  116,
      112,  136,  113,  117,  144,  194,  145,  114,  146,  141,
      118,  147,  115,  119,  126,  127,  120,  137,  184,  121,
      134,  138,  128,  142,  135,  139,  236,  129,  130,  143,

      136,  140,  151,  144,  207,  145,  152,  146,  141,  153,
      147,  378,  154,  126,  127,  368,  137,  298,  298,  195,
      138,  128,  142,  896,  139,  878,  129,  130,  143,  708,
      140,  151,  164,  175,  176,  152,  165,  219,  153,  166,
      167,  154,  155,  177,  228,  156,  168,  211,  229,  169,
      157,  220,  158,  159,  160,  212,  161,  162,  163,  200,
      200,  164,  175,  176,  690,  165,  219,  246,  166,  167,
      611,  155,  177,  228,  156,  168,  211,  229,  169,  157,
      220,  158,  159,  160,  212,  161,  162,  163,  170,   89,
      171,  234,  247,  172,  173,  226,  246,   90, 1185,  187,

      248,  235,  227, 1185,   92,  610,   93,   72,   72,   72,
       72,   72,   72,  209,   60,  561,   61,  170,   89,  171,
      234,  247,  172,  173,  226,  249,   90,  250,  187,  248,
      235,  227,  552,   92,   74,   93,   71,   71,   71,   71,
       71,   71,   72,   72,   72,   72,   72,   72,  542, 1185,
      468,   76,  253,   60,  249,  369,  250,  197,  198,  198,
      198,  198,  198,  198,  213,   62,  379,  214,  256,  244,
      201,  201,  245,  199,  202,  202,  202,  202,  202,  202,
       76,  253,  221,  230,  231,  232,  197,  410,  215,  222,
      183,  251,  233,  213,  237,  223,  214,  256,  244,  238,

      254,  245,  199,  209,   62,  257,  258,  255,  252,  259,
      260,  221,  230,  231,  232,  261,  239,  215,  222,  240,
      251,  233,  264,  237,  223,  241,  262,  265,  238,  254,
      266,  267,  242,  243,  257,  258,  255,  252,  259,  260,
      263,  274,  275,  276,  261,  239,  277,  278,  240,  475,
      475,  264,  279,  288,  241,  262,  265,  207,  289,  266,
      267,  242,  243,  268,  280,  269,  281,  282,  205,  263,
      274,  275,  276,  270,  271,  277,  278,  196,  272,  273,
      290,  279,  288,  292,  283,  293,  284,  289,  296,  297,
      291,  294,  268,  280,  269,  281,  282,  285,  286,  295,

      299,  300,  270,  271,  301,  305,  287,  272,  273,  290,
      306,  317,  292,  283,  293,  284,  318,  296,  297,  291,
      294,  302,  319,  325,  326,  303,  285,  286,  192,  299,
      300,  304,  188,  301,  305,  287,  331,  748,  743,  306,
      317,  327,  328,  186,  332,  318,  320,  185,   78,  335,
      302,  319,  325,  326,  303,  321,  336,  322,  329,  323,
      304,  307,  330,  324,  333,  331,  308,  309,  340,   73,
      327,  328,  310,  332,  311,  320,  312,  313,  335,  314,
      315,  334,  316,   64,  321,  336,  322,  329,  323,  337,
      307,  330,  324,  333,  338,  308,  309,  340,  341,  342,

      339,  310,  351,  311,  343,  312,  313,  355,  314,  315,
      334,  316,  344,  352,  356,  358,   58,  353,  337,  359,
      357,  354,  360,  338,  345,  361,  363,  341,  342,  339,
      346,  351,  364,  343,  365,  347,  355,  348,  349, 1185,
       66,  344,  352,  356,  358,  350,  353,   67,  359,  357,
      354,  360,   56,  345,  361,  363,  183,  213,  380,  346,
      367,  364,   56,  365,  347,  381,  348,  349,  184,  184,
       60,   66,  190,   66,  350,  382,  383,  384,  371,  385,
      194,  215, 1185,  218,  218, 1185,  213,  380,  386,  367,
      387,   68,  373,  373,  381, 1185,  374,  374,  374,  374,

      374,  374, 1185, 1185,  382, 1185,  384,  184,  385,  366,
      215,  198,  198,  198,  198,  198,  198,  386,  371,  387,
      388,  191,   68,  389,  195,  390,  199,  375,  375,  395,
     1185,  376,  376,  376,  376,  376,  376,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  388,
      396,  391,  389,  392,  390,  199,  393,  398,  395,  397,
      394, 1185,  558,  403, 1185,  404,  405,  406,  407,  408,
      413,  411,  414,  409,  412,  399,  415,  416,  417,  396,
      391,  418,  392,  419,  420,  393,  398,  421,  397,  394,
      400,  401,  403,  402,  404,  405,  406,  407,  408,  413,

      411,  414,  409,  412,  399,  415,  416,  417,  422,  423,
      418,  424,  419,  420,  425,  428,  421,  426,  427,  400,
      401,  429,  402,  430,  431,  432,  434,  433,  435,  436,
      437,  438,  439,  440,  441,  442,  443,  422,  423,  444,
      424,  445,  446,  425,  428,  453,  426,  427,  454,  455,
      429,  456,  430,  431,  432,  434,  433,  435,  436,  437,
      438,  439,  440,  441,  442,  443,  457, 1185,  444,  459,
      445,  446,  447,  448,  453,  449,  450,  454,  455,  460,
      456,  461,  462,  463,  458,  466,  451,  464,  467,  469,
      470,  471,  472,  473,  474,  457,  452,  465,  459,  476,

      477,  478,  298,  298,  479,  481,  482, 1185,  460,  485,
      461,  462,  463,  458,  466,  451,  464,  467,  469,  470,
      471,  472,  473,  474,  486,  452,  465,  487,  476,  477,
      478,  480,  488,  479,  481,  482,  483,  484,  485,  489,
      490,  492,  493,  494,  495,  496,  498,  499,  491,  500,
      501,  502,  497,  486,  503,  504,  487,  505,  506,  507,
      480,  488,  508,  509,  510,  483,  484,  511,  489,  490,
      492,  493,  494,  495,  496,  498,  499,  491,  500,  501,
      502,  497,  512,  503,  504,  513,  505,  506,  507,  514,
      515,  508,  509,  510,  519,  520,  511,  521,  522,  523,

      524,  525,  526,  527,  516,  528,  529,  532,  517,  530,
      533,  512,  536,  518,  513,  531,  537,  538,  514,  515,
      534,  539,  535,  519,  520,  540,  521,  522,  523,  524,
      525,  526,  527,  516,  528,  529,  532,  517,  530,  533,
      541,  536,  543,  549,  531,  537,  538,  544,  545,  534,
      539,  535,  547,  550,  540,  551,  548,  553,  554,  369,
      369,  371,  374,  374,  374,  374,  374,  374,  559,  541,
      546,  543,  549,  560,  562,  563,  544,  545,  564, 1185,
     1185,  547,  550, 1185,  551,  548,  553,  554,  374,  374,
      374,  374,  374,  374,  565,  566,  567,  559,  568,  546,

      569,  570,  560,  562,  563,  370,  571,  564,  556,  368,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      376,  376,  572,  565,  566,  567,  573,  568,  574,  569,
      570,  575,  576,  577,  578,  571,  579,  580,  581,  582,
      583,  585,  588,  589,  590,  591,  586,  592,  584,  593,
      594,  572,  587,  595,  596,  573,  597,  574,  598,  599,
      575,  576,  577,  578,  600,  579,  580,  581,  582,  583,
      585,  588,  589,  590,  591,  586,  592,  601,  593,  594,
      602,  587,  595,  596,  603,  597,  604,  598,  599,  605,
      606,  607,  608,  600,  609,  612,  613,  614,  615,  616,

      617,  619,  621,  622,  618,  623,  601,  624,  625,  602,
      626,  629,  620,  603,  630,  604,  631,  627,  605,  606,
      607,  608,  632,  609,  612,  613,  614,  615,  616,  617,
      619,  621,  622,  618,  623,  628,  624,  625,  633,  626,
      629,  620,  634,  630,  635,  631,  627,  475,  475,  637,
      638,  632,  639,  640,  641,  643,  642,  644,  645,  646,
      647,  648,  649,  650,  628,  651,  652,  633,  653,  654,
      655,  634,  656,  635,  657,  658,  659,  636,  637,  638,
      660,  639,  640,  641,  643,  642,  644,  645,  646,  647,
      648,  649,  650,  661,  651,  652,  662,  653,  654,  655,

      663,  656,  664,  657,  658,  659,  636,  665,  666,  660,
      667,  668,  669,  670,  671,  672,  673,  674,  675,  679,
     1185,  680,  661,  681,  682,  662,  683,  684,  685,  663,
      688,  664,  676,  677,  689,  691,  665,  666,  692,  667,
      668,  669,  670,  671,  672,  673,  674,  675,  679,  678,
      680,  693,  681,  682,  686,  683,  684,  685,  694,  688,
      695,  676,  677,  689,  691,  687,  696,  692,  697,  698,
      699,  701,  702,  703,  704,  705,  706,  707,  678,  709,
      693,   61,  369,  686,   67,  371,  700,  694,  710,  695,
      711,  712,  713,  450,  687,  696,  714,  697,  698,  699,

      701,  702,  703,  704,  705,  706,  707,  715,  709,  716,
      717,  718,  719,  720,  721,  700,  722,  710,  723,  711,
      712,  713,  450,  724,  725,  714,  726,  727,  370,  558,
      368,  556,  728,  729,  732, 1185,  715,  733,  716,  717,
      718,  719,  720,  721,  734,  722,  730,  723,  735,  736,
      737,  738,  724,  725,  739,  726,  727,  740,  741,  742,
      743,  728,  729,  732,  731,  744,  733,  745,  746,  747,
      749,  750,  751,  734,  752,  730,  753,  735,  736,  737,
      738,  755,  754,  739,  756,  757,  740,  741,  742,  743,
      758,  759,  760,  731,  744,  761,  745,  746,  747,  749,

      750,  751,  762,  752,  763,  753,  764,  765,  766,  767,
      755,  754,  768,  756,  757,  769,  770,  771,  772,  758,
      759,  760,  773,  774,  761,  775,  776,  777,  778,  779,
      780,  762,  781,  763,  782,  764,  765,  766,  767,  783,
      784,  768,  785,  786,  769,  770,  771,  772,  787,  788,
      789,  773,  774,  790,  775,  776,  777,  778,  779,  780,
      791,  781,  792,  782,  793,  794,  795,  796,  783,  784,
      797,  785,  786,  798,  799,  800,  801,  787,  788,  789,
      802,  803,  790,  804,  805,  806,  807,  808,  809,  791,
      810,  792,  811,  793,  794,  795,  796,  812,  813,  797,

      814,  815,  798,  799,  800,  801,  816,  817,  818,  802,
      803,  819,  804,  805,  806,  807,  808,  809,  820,  810,
      821,  811,  822,  823,  824,  825,  812,  813,  826,  814,
      815,  827,  828,  829,  830,  816,  817,  818,  831,  832,
      819,  833,  834,  835,  836,  837,  838,  820,  839,  821,
      840,  822,  823,  824,  825,  841,  842,  826,  843,  844,
      827,  828,  829,  830,  845,  846,  847,  831,  832,  848,
      833,  834,  835,  836,  837,  838,  850,  839,  851,  840,
      849,  852,  853,  854,  841,  842,  855,  843,  844,  856,
      857,  858,  859,  845,  846,  847,  860,  861,  848,  862,

      863,  864,  865,  866,  867,  850,  868,  851,  869,  849,
      852,  853,  854,  870,  871,  855,  872,  873,  856,  857,
      858,  859,  877, 1185,  879,  860,  861,  880,  862,  863,
      864,  865,  866,  867,  874,  868,  881,  869,  882,  883,
      884,  875,  870,  871,  885,  872,  873,  886,  887,  888,
      889,  877,  876,  879,  890,  891,  880,  892,  893,  894,
      895,  897,  898,  874,  899,  881,  900,  882,  883,  884,
      875,  901,  902,  885,  903,  904,  886,  887,  888,  889,
      905,  876,  906,  890,  891,  907,  892,  893,  894,  895,
      897,  898,  908,  899,  909,  900,  912,  910,  913,  914,

      901,  902,  447,  903,  904,  915,  916,  917,  918,  905,
      919,  906,  920,  921,  907,  922,  923,  924,  925,  926,
      927,  908,  911,  909,  928,  912,  929,  913,  914,  930,
      931,  447,  933,  934,  915,  916,  917,  918,  935,  919,
      936,  920,  921,  937,  922,  923,  924,  925,  926,  927,
      938,  911,  939,  928,  940,  929,  941,  942,  930,  931,
      943,  933,  934,  944,  945,  946,  948,  935,  949,  936,
      950,  951,  937,  952,  953,  954,  947,  955,  956,  938,
      957,  939,  958,  940,  959,  941,  942,  961,  962,  943,
      960,  963,  944,  945,  946,  948,  964,  949,  965,  950,

      951,  966,  952,  953,  954,  947,  955,  956,  967,  957,
      968,  958,  969,  959,  970,  971,  961,  962,  972,  960,
      963,  973,  448,  974,  975,  964,  976,  965,  977,  979,
      966,  980,  981,  982,  983,  984,  985,  967,  986,  968,
      987,  969,  988,  970,  971,  989,  990,  972,  991,  992,
      973,  448,  974,  975,  993,  976,  994,  977,  979,  995,
      980,  981,  982,  983,  984,  985,  996,  986,  997,  987,
      998,  988,  999, 1000,  989,  990, 1003,  991,  992, 1006,
     1007, 1008, 1009,  993, 1010,  994, 1011, 1012,  995, 1001,
     1002, 1013, 1014, 1015, 1016,  996, 1017,  997, 1018,  998,

     1019,  999, 1000, 1020, 1021, 1003, 1022, 1023, 1006, 1007,
     1008, 1009, 1024, 1010, 1026, 1011, 1012, 1027, 1001, 1002,
     1013, 1014, 1015, 1016, 1028, 1017, 1029, 1018, 1030, 1019,
     1031, 1032, 1020, 1021, 1033, 1022, 1023, 1034, 1035, 1036,
     1038, 1024, 1040, 1026, 1041, 1042, 1027, 1043, 1044, 1045,
     1046, 1047, 1048, 1028, 1049, 1029, 1050, 1030, 1051, 1031,
     1032, 1052, 1053, 1033, 1054, 1055, 1034, 1035, 1036, 1038,
     1056, 1040, 1057, 1041, 1042, 1058, 1043, 1044, 1045, 1046,
     1047, 1048, 1059, 1049, 1060, 1050, 1061, 1051, 1062, 1063,
     1052, 1053, 1064, 1054, 1055, 1065, 1066, 1067, 1068, 1056,

     1069, 1057, 1070, 1071, 1058, 1072, 1073, 1074, 1075, 1076,
     1077, 1059, 1078, 1060, 1080, 1061, 1081, 1062, 1063, 1082,
     1083, 1064, 1084, 1085, 1065, 1066, 1067, 1068, 1086, 1069,
     1087, 1070, 1071, 1088, 1072, 1073, 1074, 1075, 1076, 1077,
     1089, 1078, 1090, 1080, 1091, 1081, 1092, 1093, 1082, 1083,
     1094, 1084, 1085, 1095, 1096, 1097, 1098, 1086, 1099, 1087,
     1100, 1101, 1088, 1102, 1103, 1104, 1105, 1106, 1107, 1089,
     1108, 1090, 1109, 1091, 1110, 1092, 1093, 1111, 1112, 1094,
     1113, 1114, 1095, 1096, 1097, 1098, 1115, 1099, 1116, 1100,
     1101, 1117, 1102, 1103, 1104, 1105, 1106, 1107, 1118, 1108,

     1119, 1109, 1120, 1110, 1121, 1122, 1111, 1112, 1124, 1113,
     1114, 1125, 1126, 1127, 1128, 1115, 1129, 1116, 1130, 1131,
     1117, 1132, 1133, 1134, 1135, 1136, 1137, 1118, 1138, 1119,
     1139, 1120, 1140, 1121, 1122, 1141, 1142, 1124, 1143, 1144,
     1125, 1126, 1127, 1128, 1145, 1129, 1146, 1130, 1131, 1147,
     1132, 1133, 1134, 1135, 1136, 1137, 1148, 1138, 1149, 1139,
     1150, 1140, 1151, 1152, 1141, 1142, 1153, 1143, 1144, 1154,
     1155, 1156, 1157, 1145, 1158, 1146, 1159, 1160, 1147, 1161,
     1162, 1163, 1164, 1165, 1167, 1148, 1168, 1149, 1169, 1150,
     1170, 1151, 1152, 1171, 1172, 1153, 1173, 1174, 1154, 1155,

     1156, 1157, 1175, 1158, 1176, 1159, 1160, 1177, 1161, 1162,
     1163, 1164, 1165, 1167, 1178, 1168, 1179, 1169, 1180, 1170,
     1181, 1182, 1171, 1172, 1183, 1173, 1174, 1184, 1185, 1185,
     1185, 1175, 1185, 1176, 1185, 1185, 1177, 1185, 1185, 1185,
     1185, 1185, 1185, 1178, 1185, 1179, 1185, 1180, 1185, 1181,
     1182, 1185, 1185, 1183, 1185, 1185, 1184,   55,   55,   55,
       55,   55,   55,   55,   55,   59,   59,   59,   59,   59,
       59,   59,   59,   63, 1185,   63,   63,   63,   63,   63,
       63,   65,   65,   65,   65,   65,   65,   65,   65,   85,
       85,   85,   85,   85,   85,   88,   88,  182,  182,  182,

      182,  182,  182,  182,  189,  189,  189,  189,  189,  189,
      189,  189,  193,  193,  193,  193,  193,  193,  193,  193,
      204,  204, 1185,  204,  204,  204,  204,  204,  206,  206,
      206,  206, 1185,  206,  206,  206,  208,  208,  208,  208,
      208,  208,  208,  184,  184,  184,  184,  184,  184,  184,
      188, 1185,  188,  188,  188,  188,  188,  188,  192, 1185,
      192,  192,  192,  192,  192,  192,  372, 1185,  372,  372,
      372,  372,  372,  372,  555, 1185,  555,  555,  555,  555,
      555,  555,  557, 1185,  557,  557,  557,  557,  557,  557,
        7, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,

     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185
    } ;

static yyconst flex_int16_t yy_chk[2675] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    5,    6,   12,   16,   12,   23,   23,
       23,   17,   17,   16,   17,   17,   17,   17,   17,   17,

       18,   18,   18,   18,   18,   18,   25,   25,   75,   75,
       26, 1199,    5,    6,   21,   26,   21,   21,   21,   21,
       21,   21,   33, 1195,   36,   94,   94, 1158,   43,   37,
       48,   21, 1101,   37,   51, 1040,   12,   16,   20,   27,
       20,   20,   20,   20,   20,   20, 1038,   27,   52,   27,
      982,   33,   20,   36,   27,   20,   27,   43,   37,   48,
       21,   26,   37,   51,   28,   34,  979,   50,   27,   42,
      963,   89,   42,   34,   20,   29,   27,   52,   27,   34,
       65,   20,   29,   27,   20,   27,   28,   65,  192,   29,
       28,   92,   29,   28,   34,   29,   28,  936,   42,   50,

       89,   42,   34,   20,   29,   59,   28,   59,   34,   30,
       93,   29,   62,   30,   62,   28,   97,   30,   29,   28,
       92,   29,   28,   30,   29,   28,   30,  935,   50,   30,
       31,   65,  192,   98,  204,   28,  204,   53,   30,   93,
       32,   31,   30,   31,   32,   97,   30,  905,   31,   53,
       53,   32,   30,   31,   32,   30,   59,   32,   30,   31,
       32,   38,   98,   62,  842,   38,  188,  104,   68,   32,
       31,   38,   31,   32,   41,   68,   41,   31,   41,   40,
       32,   41,   31,   32,   35,   35,   32,   39,   53,   32,
       38,   39,   35,   40,   38,   39,  104,   35,   35,   40,

       38,   39,   44,   41,  206,   41,   44,   41,   40,   44,
       41,  206,   44,   35,   35,  188,   39,  144,  144,   68,
       39,   35,   40,  794,   39,  769,   35,   35,   40,  553,
       39,   44,   46,   49,   49,   44,   46,   95,   44,   46,
       46,   44,   45,   49,  101,   45,   46,   90,  101,   46,
       45,   95,   45,   45,   45,   90,   45,   45,   45,  200,
      200,   46,   49,   49,  531,   46,   95,  108,   46,   46,
      440,   45,   49,  101,   45,   46,   90,  101,   46,   45,
       95,   45,   45,   45,   90,   45,   45,   45,   47,   57,
       47,  103,  109,   47,   47,  100,  108,   57,   85,   57,

      110,  103,  100,   85,   57,  439,   57,   70,   70,   70,
       70,   70,   70,  208,  189,  382,  189,   47,   57,   47,
      103,  109,   47,   47,  100,  111,   57,  112,   57,  110,
      103,  100,  362,   57,   71,   57,   71,   71,   71,   71,
       71,   71,   72,   72,   72,   72,   72,   72,  355,   85,
      287,   71,  114,  190,  111,  190,  112,   72,   74,   74,
       74,   74,   74,   74,   91,  189,  208,   91,  116,  107,
       76,   76,  107,   74,   76,   76,   76,   76,   76,   76,
       71,  114,   96,  102,  102,  102,   72,  238,   91,   96,
      184,  113,  102,   91,  105,   96,   91,  116,  107,  105,

      115,  107,   74,   87,  190,  117,  118,  115,  113,  119,
      120,   96,  102,  102,  102,  121,  106,   91,   96,  106,
      113,  102,  123,  105,   96,  106,  122,  124,  105,  115,
      125,  127,  106,  106,  117,  118,  115,  113,  119,  120,
      122,  130,  131,  132,  121,  106,  133,  134,  106,  294,
      294,  123,  134,  137,  106,  122,  124,   86,  138,  125,
      127,  106,  106,  128,  135,  128,  135,  135,   84,  122,
      130,  131,  132,  128,  128,  133,  134,   69,  128,  128,
      139,  134,  137,  140,  136,  141,  136,  138,  143,  143,
      139,  142,  128,  135,  128,  135,  135,  136,  136,  142,

      145,  146,  128,  128,  147,  149,  136,  128,  128,  139,
      150,  152,  140,  136,  141,  136,  153,  143,  143,  139,
      142,  148,  154,  156,  157,  148,  136,  136,   67,  145,
      146,  148,   61,  147,  149,  136,  160,  603,  603,  150,
      152,  158,  158,   56,  161,  153,  155,   54,   22,  163,
      148,  154,  156,  157,  148,  155,  164,  155,  159,  155,
      148,  151,  159,  155,  162,  160,  151,  151,  166,   19,
      158,  158,  151,  161,  151,  155,  151,  151,  163,  151,
      151,  162,  151,   15,  155,  164,  155,  159,  155,  165,
      151,  159,  155,  162,  165,  151,  151,  166,  167,  167,

      165,  151,  171,  151,  169,  151,  151,  173,  151,  151,
      162,  151,  169,  172,  174,  175,   11,  172,  165,  175,
      174,  172,  176,  165,  169,  177,  179,  167,  167,  165,
      170,  171,  180,  169,  181,  170,  173,  170,  170,    7,
      193,  169,  172,  174,  175,  170,  172,  193,  175,  174,
      172,  176,    4,  169,  177,  179,  182,  187,  212,  170,
      187,  180,    3,  181,  170,  213,  170,  170,  182,  182,
      191,  194,  191,  195,  170,  217,  218,  219,  194,  220,
      195,  187,    0,  218,  218,    0,  187,  212,  221,  187,
      222,  193,  197,  197,  213,    0,  197,  197,  197,  197,

      197,  197,    0,    0,  217,    0,  219,  182,  220,  182,
      187,  198,  198,  198,  198,  198,  198,  221,  370,  222,
      224,  191,  194,  225,  195,  226,  198,  199,  199,  229,
        0,  199,  199,  199,  199,  199,  199,  201,  201,  201,
      201,  201,  201,  202,  202,  202,  202,  202,  202,  224,
      230,  227,  225,  227,  226,  198,  228,  231,  229,  230,
      228,    0,  370,  233,    0,  234,  235,  236,  236,  237,
      240,  239,  241,  237,  239,  232,  241,  242,  243,  230,
      227,  244,  227,  246,  247,  228,  231,  248,  230,  228,
      232,  232,  233,  232,  234,  235,  236,  236,  237,  240,

      239,  241,  237,  239,  232,  241,  242,  243,  249,  250,
      244,  252,  246,  247,  253,  255,  248,  254,  254,  232,
      232,  256,  232,  257,  258,  259,  260,  259,  261,  262,
      263,  264,  265,  266,  267,  268,  269,  249,  250,  270,
      252,  271,  272,  253,  255,  274,  254,  254,  275,  276,
      256,  277,  257,  258,  259,  260,  259,  261,  262,  263,
      264,  265,  266,  267,  268,  269,  278,    0,  270,  279,
      271,  272,  273,  273,  274,  273,  273,  275,  276,  280,
      277,  281,  282,  283,  278,  285,  273,  284,  286,  288,
      289,  290,  291,  292,  293,  278,  273,  284,  279,  295,

      296,  297,  298,  298,  297,  299,  300,    0,  280,  302,
      281,  282,  283,  278,  285,  273,  284,  286,  288,  289,
      290,  291,  292,  293,  303,  273,  284,  304,  295,  296,
      297,  298,  305,  297,  299,  300,  301,  301,  302,  306,
      307,  308,  309,  310,  311,  312,  313,  314,  307,  315,
      316,  317,  312,  303,  318,  319,  304,  320,  321,  322,
      298,  305,  323,  325,  326,  301,  301,  327,  306,  307,
      308,  309,  310,  311,  312,  313,  314,  307,  315,  316,
      317,  312,  328,  318,  319,  329,  320,  321,  322,  330,
      331,  323,  325,  326,  333,  334,  327,  335,  336,  337,

      338,  339,  340,  341,  331,  342,  343,  345,  331,  344,
      346,  328,  348,  331,  329,  344,  349,  350,  330,  331,
      347,  351,  347,  333,  334,  352,  335,  336,  337,  338,
      339,  340,  341,  331,  342,  343,  345,  331,  344,  346,
      354,  348,  356,  359,  344,  349,  350,  357,  357,  347,
      351,  347,  358,  360,  352,  361,  358,  364,  365,  368,
      369,  371,  373,  373,  373,  373,  373,  373,  380,  354,
      357,  356,  359,  381,  384,  385,  357,  357,  386,    0,
        0,  358,  360,    0,  361,  358,  364,  365,  374,  374,
      374,  374,  374,  374,  387,  391,  393,  380,  394,  357,

      395,  396,  381,  384,  385,  371,  397,  386,  368,  369,
      375,  375,  375,  375,  375,  375,  376,  376,  376,  376,
      376,  376,  398,  387,  391,  393,  399,  394,  400,  395,
      396,  401,  402,  403,  404,  397,  405,  406,  407,  408,
      409,  410,  411,  412,  413,  414,  410,  415,  409,  416,
      417,  398,  410,  418,  419,  399,  423,  400,  425,  426,
      401,  402,  403,  404,  428,  405,  406,  407,  408,  409,
      410,  411,  412,  413,  414,  410,  415,  429,  416,  417,
      430,  410,  418,  419,  431,  423,  432,  425,  426,  433,
      435,  436,  437,  428,  438,  441,  442,  443,  444,  445,

      446,  451,  453,  457,  446,  458,  429,  461,  462,  430,
      464,  468,  451,  431,  469,  432,  470,  466,  433,  435,
      436,  437,  471,  438,  441,  442,  443,  444,  445,  446,
      451,  453,  457,  446,  458,  466,  461,  462,  472,  464,
      468,  451,  473,  469,  474,  470,  466,  475,  475,  476,
      478,  471,  479,  480,  481,  482,  481,  483,  484,  485,
      486,  487,  488,  489,  466,  490,  492,  472,  493,  494,
      495,  473,  496,  474,  497,  498,  499,  475,  476,  478,
      500,  479,  480,  481,  482,  481,  483,  484,  485,  486,
      487,  488,  489,  501,  490,  492,  502,  493,  494,  495,

      503,  496,  504,  497,  498,  499,  475,  505,  506,  500,
      507,  508,  510,  512,  513,  514,  515,  516,  517,  519,
        0,  520,  501,  521,  522,  502,  523,  524,  527,  503,
      529,  504,  518,  518,  530,  534,  505,  506,  535,  507,
      508,  510,  512,  513,  514,  515,  516,  517,  519,  518,
      520,  536,  521,  522,  528,  523,  524,  527,  537,  529,
      538,  518,  518,  530,  534,  528,  539,  535,  540,  541,
      542,  543,  544,  545,  546,  548,  549,  551,  518,  554,
      536,  555,  556,  528,  557,  558,  542,  537,  560,  538,
      561,  562,  563,  564,  528,  539,  565,  540,  541,  542,

      543,  544,  545,  546,  548,  549,  551,  566,  554,  567,
      568,  570,  571,  572,  573,  542,  574,  560,  575,  561,
      562,  563,  564,  576,  578,  565,  580,  581,  557,  558,
      555,  556,  582,  583,  585,    0,  566,  586,  567,  568,
      570,  571,  572,  573,  587,  574,  584,  575,  588,  589,
      590,  591,  576,  578,  592,  580,  581,  593,  594,  595,
      596,  582,  583,  585,  584,  597,  586,  598,  599,  600,
      605,  606,  609,  587,  610,  584,  611,  588,  589,  590,
      591,  612,  611,  592,  614,  617,  593,  594,  595,  596,
      618,  619,  620,  584,  597,  621,  598,  599,  600,  605,

      606,  609,  622,  610,  626,  611,  627,  628,  629,  631,
      612,  611,  632,  614,  617,  633,  634,  635,  636,  618,
      619,  620,  637,  638,  621,  639,  640,  641,  642,  645,
      646,  622,  647,  626,  648,  627,  628,  629,  631,  652,
      653,  632,  654,  655,  633,  634,  635,  636,  656,  657,
      658,  637,  638,  659,  639,  640,  641,  642,  645,  646,
      660,  647,  661,  648,  664,  665,  666,  667,  652,  653,
      668,  654,  655,  669,  670,  671,  672,  656,  657,  658,
      673,  674,  659,  675,  676,  677,  678,  679,  680,  660,
      681,  661,  683,  664,  665,  666,  667,  684,  685,  668,

      686,  687,  669,  670,  671,  672,  688,  689,  692,  673,
      674,  693,  675,  676,  677,  678,  679,  680,  694,  681,
      695,  683,  696,  699,  700,  701,  684,  685,  702,  686,
      687,  703,  704,  708,  709,  688,  689,  692,  710,  711,
      693,  713,  715,  717,  718,  720,  721,  694,  722,  695,
      723,  696,  699,  700,  701,  724,  726,  702,  728,  729,
      703,  704,  708,  709,  730,  731,  732,  710,  711,  733,
      713,  715,  717,  718,  720,  721,  734,  722,  735,  723,
      733,  736,  737,  738,  724,  726,  740,  728,  729,  741,
      742,  745,  747,  730,  731,  732,  749,  750,  733,  752,

      753,  754,  757,  759,  760,  734,  761,  735,  762,  733,
      736,  737,  738,  763,  764,  740,  765,  766,  741,  742,
      745,  747,  768,    0,  770,  749,  750,  771,  752,  753,
      754,  757,  759,  760,  767,  761,  772,  762,  773,  775,
      776,  767,  763,  764,  777,  765,  766,  778,  779,  780,
      781,  768,  767,  770,  782,  783,  771,  785,  788,  789,
      790,  796,  797,  767,  798,  772,  800,  773,  775,  776,
      767,  801,  802,  777,  803,  804,  778,  779,  780,  781,
      805,  767,  806,  782,  783,  807,  785,  788,  789,  790,
      796,  797,  808,  798,  809,  800,  811,  810,  812,  813,

      801,  802,  814,  803,  804,  815,  816,  817,  819,  805,
      821,  806,  823,  824,  807,  826,  827,  828,  829,  830,
      832,  808,  810,  809,  835,  811,  838,  812,  813,  839,
      840,  814,  843,  844,  815,  816,  817,  819,  845,  821,
      846,  823,  824,  847,  826,  827,  828,  829,  830,  832,
      848,  810,  849,  835,  850,  838,  855,  856,  839,  840,
      857,  843,  844,  861,  862,  863,  864,  845,  865,  846,
      867,  870,  847,  871,  872,  873,  863,  874,  875,  848,
      876,  849,  877,  850,  878,  855,  856,  879,  881,  857,
      878,  882,  861,  862,  863,  864,  884,  865,  885,  867,

      870,  886,  871,  872,  873,  863,  874,  875,  888,  876,
      890,  877,  891,  878,  895,  896,  879,  881,  897,  878,
      882,  898,  899,  901,  902,  884,  903,  885,  904,  906,
      886,  907,  908,  909,  911,  912,  913,  888,  914,  890,
      915,  891,  916,  895,  896,  919,  920,  897,  921,  922,
      898,  899,  901,  902,  923,  903,  925,  904,  906,  926,
      907,  908,  909,  911,  912,  913,  927,  914,  928,  915,
      929,  916,  930,  932,  919,  920,  933,  921,  922,  938,
      939,  940,  942,  923,  943,  925,  945,  946,  926,  932,
      932,  947,  948,  949,  951,  927,  954,  928,  955,  929,

      956,  930,  932,  957,  958,  933,  959,  960,  938,  939,
      940,  942,  962,  943,  964,  945,  946,  966,  932,  932,
      947,  948,  949,  951,  967,  954,  968,  955,  969,  956,
      971,  972,  957,  958,  973,  959,  960,  975,  977,  978,
      980,  962,  983,  964,  984,  985,  966,  986,  991,  992,
      993,  994,  996,  967,  999,  968, 1000,  969, 1001,  971,
      972, 1002, 1006,  973, 1007, 1008,  975,  977,  978,  980,
     1009,  983, 1010,  984,  985, 1011,  986,  991,  992,  993,
      994,  996, 1012,  999, 1013, 1000, 1014, 1001, 1015, 1016,
     1002, 1006, 1017, 1007, 1008, 1018, 1020, 1022, 1023, 1009,

     1024, 1010, 1025, 1026, 1011, 1027, 1030, 1031, 1034, 1035,
     1036, 1012, 1037, 1013, 1039, 1014, 1042, 1015, 1016, 1044,
     1046, 1017, 1047, 1048, 1018, 1020, 1022, 1023, 1050, 1024,
     1051, 1025, 1026, 1052, 1027, 1030, 1031, 1034, 1035, 1036,
     1053, 1037, 1056, 1039, 1057, 1042, 1058, 1059, 1044, 1046,
     1060, 1047, 1048, 1061, 1062, 1063, 1064, 1050, 1067, 1051,
     1068, 1070, 1052, 1071, 1074, 1075, 1077, 1078, 1079, 1053,
     1080, 1056, 1082, 1057, 1083, 1058, 1059, 1085, 1086, 1060,
     1087, 1088, 1061, 1062, 1063, 1064, 1089, 1067, 1090, 1068,
     1070, 1092, 1071, 1074, 1075, 1077, 1078, 1079, 1093, 1080,

     1097, 1082, 1098, 1083, 1099, 1100, 1085, 1086, 1102, 1087,
     1088, 1103, 1104, 1105, 1106, 1089, 1107, 1090, 1108, 1109,
     1092, 1110, 1111, 1113, 1115, 1116, 1117, 1093, 1118, 1097,
     1119, 1098, 1121, 1099, 1100, 1122, 1123, 1102, 1125, 1127,
     1103, 1104, 1105, 1106, 1128, 1107, 1129, 1108, 1109, 1130,
     1110, 1111, 1113, 1115, 1116, 1117, 1131, 1118, 1133, 1119,
     1134, 1121, 1135, 1138, 1122, 1123, 1139, 1125, 1127, 1140,
     1142, 1143, 1144, 1128, 1145, 1129, 1146, 1150, 1130, 1151,
     1152, 1154, 1155, 1156, 1159, 1131, 1160, 1133, 1162, 1134,
     1163, 1135, 1138, 1164, 1165, 1139, 1166, 1167, 1140, 1142,

     1143, 1144, 1168, 1145, 1170, 1146, 1150, 1171, 1151, 1152,
     1154, 1155, 1156, 1159, 1172, 1160, 1173, 1162, 1176, 1163,
     1177, 1178, 1164, 1165, 1179, 1166, 1167, 1183,    0,    0,
        0, 1168,    0, 1170,    0,    0, 1171,    0,    0,    0,
        0,    0,    0, 1172,    0, 1173,    0, 1176,    0, 1177,
     1178,    0,    0, 1179,    0,    0, 1183, 1186, 1186, 1186,
     1186, 1186, 1186, 1186, 1186, 1187, 1187, 1187, 1187, 1187,
     1187, 1187, 1187, 1188,    0, 1188, 1188, 1188, 1188, 1188,
     1188, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1189, 1190,
     1190, 1190, 1190, 1190, 1190, 1191, 1191, 1192, 1192, 1192,

     1192, 1192, 1192, 1192, 1193, 1193, 1193, 1193, 1193, 1193,
     1193, 1193, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1196, 1196,    0, 1196, 1196, 1196, 1196, 1196, 1197, 1197,
     1197, 1197,    0, 1197, 1197, 1197, 1198, 1198, 1198, 1198,
     1198, 1198, 1198, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1201,    0, 1201, 1201, 1201, 1201, 1201, 1201, 1202,    0,
     1202, 1202, 1202, 1202, 1202, 1202, 1203,    0, 1203, 1203,
     1203, 1203, 1203, 1203, 1204,    0, 1204, 1204, 1204, 1204,
     1204, 1204, 1205,    0, 1205, 1205, 1205, 1205, 1205, 1205,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,

     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1185
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[272] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,     };

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "pmysql.l"
/*
 * I stole (use) a template from flex & bison book (https://github.com/hurdad/pmysql).
 * Thanks to this chew, he (she) is cool.
 *
 * This file describes a bison grammar and how bison push args to rpn stack
 *
 * Yare yare daze
 */
#line 12 "pmysql.l"
#include "pmysql.tab.hpp"
#include <stdarg.h>
#include <string.h>

int yylex(void);

void yyerror(char *s, ...);

int oldstate;



#line 1675 "pmysql.cpp"

#define INITIAL 0
#define COMMENT 1
#define BTWMODE 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

			int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 27 "pmysql.l"


	/* keywords */
#line 1905 "pmysql.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1186 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2591 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 30 "pmysql.l"
{ return ADD; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 31 "pmysql.l"
{ return ALL; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 32 "pmysql.l"
{ return ALTER; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 33 "pmysql.l"
{ return ANALYZE; }
	YY_BREAK
/* Hack for BETWEEN ... AND ... 
   * return special AND token if BETWEEN seen
   */
case 5:
YY_RULE_SETUP
#line 39 "pmysql.l"
{ BEGIN INITIAL; return AND; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 40 "pmysql.l"
{ return ANDOP; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 41 "pmysql.l"
{ return ANY; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 42 "pmysql.l"
{ return AS; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 43 "pmysql.l"
{ return ASC; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 44 "pmysql.l"
{ return AUTO_INCREMENT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 45 "pmysql.l"
{ return BEFORE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 46 "pmysql.l"
{ BEGIN BTWMODE; return BETWEEN; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 47 "pmysql.l"
{ return BIGINT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 48 "pmysql.l"
{ return BINARY; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 49 "pmysql.l"
{ return BIT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 50 "pmysql.l"
{ return BLOB; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 51 "pmysql.l"
{ return BOTH; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 52 "pmysql.l"
{ return BY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 53 "pmysql.l"
{ return CALL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 54 "pmysql.l"
{ return CASCADE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 55 "pmysql.l"
{ return CASE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 56 "pmysql.l"
{ return CHANGE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 57 "pmysql.l"
{ return CHAR; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 58 "pmysql.l"
{ return CHECK; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 59 "pmysql.l"
{ return COLLATE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 60 "pmysql.l"
{ return COLUMN; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 61 "pmysql.l"
{ return COMMENT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 62 "pmysql.l"
{ return CONDITION; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 63 "pmysql.l"
{ return CONSTRAINT; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 64 "pmysql.l"
{ return CONTINUE; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 65 "pmysql.l"
{ return CONVERT; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 66 "pmysql.l"
{ return DROP; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 67 "pmysql.l"
{ return CREATE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 68 "pmysql.l"
{ return CROSS; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 69 "pmysql.l"
{ return CURRENT_DATE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 70 "pmysql.l"
{ return CURRENT_TIME; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 71 "pmysql.l"
{ return CURRENT_TIMESTAMP; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 72 "pmysql.l"
{ return CURRENT_USER; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 73 "pmysql.l"
{ return CURSOR; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 74 "pmysql.l"
{ return DATABASE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 75 "pmysql.l"
{ return DATABASES; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 76 "pmysql.l"
{ return DATE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 77 "pmysql.l"
{ return DATETIME; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 78 "pmysql.l"
{ return DAY_HOUR; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 79 "pmysql.l"
{ return DAY_MICROSECOND; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 80 "pmysql.l"
{ return DAY_MINUTE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 81 "pmysql.l"
{ return DAY_SECOND; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 82 "pmysql.l"
{ return DECIMAL; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 83 "pmysql.l"
{ return DECLARE; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 84 "pmysql.l"
{ return DEFAULT; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 85 "pmysql.l"
{ return DELAYED; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 86 "pmysql.l"
{ return DELETE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 87 "pmysql.l"
{ return DESC; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 88 "pmysql.l"
{ return DESCRIBE; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 89 "pmysql.l"
{ return DETERMINISTIC; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 90 "pmysql.l"
{ return DISTINCT; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 91 "pmysql.l"
{ return DISTINCTROW; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 92 "pmysql.l"
{ return DIV; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 93 "pmysql.l"
{ return DOUBLE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 94 "pmysql.l"
{ return DROP; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 95 "pmysql.l"
{ return DUAL; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 96 "pmysql.l"
{ return EACH; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 97 "pmysql.l"
{ return ELSE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 98 "pmysql.l"
{ return ELSEIF; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 99 "pmysql.l"
{ return END; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 100 "pmysql.l"
{ return ENUM; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 101 "pmysql.l"
{ return ESCAPED; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 102 "pmysql.l"
{ yylval.subtok = 0; return EXISTS; }
	YY_BREAK
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 103 "pmysql.l"
{ yylval.subtok = 1; return EXISTS; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 104 "pmysql.l"
{ return EXPLAIN; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 105 "pmysql.l"
{ return FETCH; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 106 "pmysql.l"
{ return FLOAT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 107 "pmysql.l"
{ return FOR; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 108 "pmysql.l"
{ return FORCE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 109 "pmysql.l"
{ return FOREIGN; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 110 "pmysql.l"
{ return FROM; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 111 "pmysql.l"
{ return FULLTEXT; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 112 "pmysql.l"
{ return GRANT; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 113 "pmysql.l"
{ return GROUP; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 114 "pmysql.l"
{ return HAVING; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 115 "pmysql.l"
{ return HIGH_PRIORITY; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 116 "pmysql.l"
{ return HOUR_MICROSECOND; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 117 "pmysql.l"
{ return HOUR_MINUTE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 118 "pmysql.l"
{ return HOUR_SECOND; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 119 "pmysql.l"
{ return IF; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 120 "pmysql.l"
{ return IGNORE; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 121 "pmysql.l"
{ return IN; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 122 "pmysql.l"
{ return INFILE; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 123 "pmysql.l"
{ return INNER; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 124 "pmysql.l"
{ return INOUT; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 125 "pmysql.l"
{ return INSENSITIVE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 126 "pmysql.l"
{ return INSERT; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 127 "pmysql.l"
{ return INTEGER; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 128 "pmysql.l"
{ return INTERVAL; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 129 "pmysql.l"
{ return INTO; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 130 "pmysql.l"
{ return IS; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 131 "pmysql.l"
{ return ITERATE; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 132 "pmysql.l"
{ return JOIN; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 133 "pmysql.l"
{ return KEY; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 134 "pmysql.l"
{ return KEYS; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 135 "pmysql.l"
{ return KILL; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 136 "pmysql.l"
{ return LEADING; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 137 "pmysql.l"
{ return LEAVE; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 138 "pmysql.l"
{ return LEFT; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 139 "pmysql.l"
{ return LIKE; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 140 "pmysql.l"
{ return LIMIT; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 141 "pmysql.l"
{ return LINES; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 142 "pmysql.l"
{ return LOAD; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 143 "pmysql.l"
{ return LOCALTIME; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 144 "pmysql.l"
{ return LOCALTIMESTAMP; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 145 "pmysql.l"
{ return LOCK; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 146 "pmysql.l"
{ return LONG; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 147 "pmysql.l"
{ return LONGBLOB; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 148 "pmysql.l"
{ return LONGTEXT; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 149 "pmysql.l"
{ return LOOP; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 150 "pmysql.l"
{ return LOW_PRIORITY; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 151 "pmysql.l"
{ return MATCH; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 152 "pmysql.l"
{ return MEDIUMBLOB; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 153 "pmysql.l"
{ return MEDIUMINT; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 154 "pmysql.l"
{ return MEDIUMTEXT; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 155 "pmysql.l"
{ return MINUTE_MICROSECOND; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 156 "pmysql.l"
{ return MINUTE_SECOND; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 157 "pmysql.l"
{ return MOD; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 158 "pmysql.l"
{ return MODIFIES; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 159 "pmysql.l"
{ return NATURAL; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 160 "pmysql.l"
{ return NOT; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 161 "pmysql.l"
{ return NO_WRITE_TO_BINLOG; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 162 "pmysql.l"
{ return NULLX; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 163 "pmysql.l"
{ return NUMBER; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 164 "pmysql.l"
{ return ON; }
	YY_BREAK
case 131:
/* rule 131 can match eol */
YY_RULE_SETUP
#line 165 "pmysql.l"
{ return ONDUPLICATE; } /* hack due to limited lookahead */
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 166 "pmysql.l"
{ return OPTIMIZE; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 167 "pmysql.l"
{ return OPTION; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 168 "pmysql.l"
{ return OPTIONALLY; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 169 "pmysql.l"
{ return OR; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 170 "pmysql.l"
{ return ORDER; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 171 "pmysql.l"
{ return OUT; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 172 "pmysql.l"
{ return OUTER; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 173 "pmysql.l"
{ return OUTFILE; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 174 "pmysql.l"
{ return PRECISION; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 175 "pmysql.l"
{ return PRIMARY; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 176 "pmysql.l"
{ return PROCEDURE; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 177 "pmysql.l"
{ return PURGE; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 178 "pmysql.l"
{ return QUICK; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 179 "pmysql.l"
{ return READ; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 180 "pmysql.l"
{ return READS; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 181 "pmysql.l"
{ return REAL; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 182 "pmysql.l"
{ return REFERENCES; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 183 "pmysql.l"
{ return REGEXP; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 184 "pmysql.l"
{ return RELEASE; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 185 "pmysql.l"
{ return RENAME; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 186 "pmysql.l"
{ return REPEAT; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 187 "pmysql.l"
{ return REPLACE; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 188 "pmysql.l"
{ return REQUIRE; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 189 "pmysql.l"
{ return RESTRICT; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 190 "pmysql.l"
{ return RETURN; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 191 "pmysql.l"
{ return REVOKE; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 192 "pmysql.l"
{ return RIGHT; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 193 "pmysql.l"
{ return ROLLUP; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 194 "pmysql.l"
{ return SECOND_MICROSECOND; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 195 "pmysql.l"
{ return SELECT; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 196 "pmysql.l"
{ return SENSITIVE; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 197 "pmysql.l"
{ return SEPARATOR; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 198 "pmysql.l"
{ return SET; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 199 "pmysql.l"
{ return SHOW; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 200 "pmysql.l"
{ return SMALLINT; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 201 "pmysql.l"
{ return SOME; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 202 "pmysql.l"
{ return SONAME; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 203 "pmysql.l"
{ return SPATIAL; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 204 "pmysql.l"
{ return SPECIFIC; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 205 "pmysql.l"
{ return SQL; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 206 "pmysql.l"
{ return SQLEXCEPTION; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 207 "pmysql.l"
{ return SQLSTATE; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 208 "pmysql.l"
{ return SQLWARNING; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 209 "pmysql.l"
{ return SQL_BIG_RESULT; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 210 "pmysql.l"
{ return SQL_CALC_FOUND_ROWS; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 211 "pmysql.l"
{ return SQL_SMALL_RESULT; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 212 "pmysql.l"
{ return SSL; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 213 "pmysql.l"
{ return STARTING; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 214 "pmysql.l"
{ return STRAIGHT_JOIN; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 215 "pmysql.l"
{ return TABLE; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 216 "pmysql.l"
{ return TEMPORARY; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 217 "pmysql.l"
{ return TERMINATED; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 218 "pmysql.l"
{ return TEXT; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 219 "pmysql.l"
{ return THEN; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 220 "pmysql.l"
{ return TIME; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 221 "pmysql.l"
{ return TIMESTAMP; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 222 "pmysql.l"
{ return TINYINT; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 223 "pmysql.l"
{ return TINYTEXT; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 224 "pmysql.l"
{ return TO; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 225 "pmysql.l"
{ return TRAILING; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 226 "pmysql.l"
{ return TRIGGER; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 227 "pmysql.l"
{ return UNDO; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 228 "pmysql.l"
{ return UNION; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 229 "pmysql.l"
{ return UNIQUE; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 230 "pmysql.l"
{ return UNLOCK; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 231 "pmysql.l"
{ return UNSIGNED; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 232 "pmysql.l"
{ return UPDATE; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 233 "pmysql.l"
{ return USAGE; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 234 "pmysql.l"
{ return USE; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 235 "pmysql.l"
{ return USING; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 236 "pmysql.l"
{ return UTC_DATE; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 237 "pmysql.l"
{ return UTC_TIME; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 238 "pmysql.l"
{ return UTC_TIMESTAMP; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 239 "pmysql.l"
{ return VALUES; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 240 "pmysql.l"
{ return VARBINARY; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 241 "pmysql.l"
{ return VARCHAR; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 242 "pmysql.l"
{ return VARYING; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 243 "pmysql.l"
{ return WHEN; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 244 "pmysql.l"
{ return WHERE; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 245 "pmysql.l"
{ return WHILE; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 246 "pmysql.l"
{ return WITH; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 247 "pmysql.l"
{ return WRITE; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 248 "pmysql.l"
{ return XOR; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 249 "pmysql.l"
{ return YEAR; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 250 "pmysql.l"
{ return YEAR_MONTH; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 251 "pmysql.l"
{ return ZEROFILL; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 252 "pmysql.l"
{return EXIT;}
	YY_BREAK
/* numbers */
case 219:
YY_RULE_SETUP
#line 255 "pmysql.l"
{ yylval.intval = atoi(yytext); return INTNUM; } 
	YY_BREAK
case 220:
#line 258 "pmysql.l"
case 221:
#line 259 "pmysql.l"
case 222:
#line 260 "pmysql.l"
case 223:
#line 261 "pmysql.l"
case 224:
YY_RULE_SETUP
#line 261 "pmysql.l"
{ yylval.floatval = atof(yytext) ;
                                  return APPROXNUM; }
	YY_BREAK
/* booleans */
case 225:
YY_RULE_SETUP
#line 264 "pmysql.l"
{ yylval.intval = 1; return BOOL; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 265 "pmysql.l"
{ yylval.intval = -1; return BOOL; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 266 "pmysql.l"
{ yylval.intval = 0; return BOOL; }
	YY_BREAK
/* strings */
case 228:
#line 270 "pmysql.l"
case 229:
YY_RULE_SETUP
#line 270 "pmysql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
case 230:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 272 "pmysql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
case 231:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 273 "pmysql.l"
{ yyerror("Unterminated string %s", yytext); }
	YY_BREAK
/* hex strings */
case 232:
#line 277 "pmysql.l"
case 233:
YY_RULE_SETUP
#line 277 "pmysql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
/* bit strings */
case 234:
#line 281 "pmysql.l"
case 235:
YY_RULE_SETUP
#line 281 "pmysql.l"
{ yylval.strval = strdup(yytext); return STRING; }
	YY_BREAK
/* operators */
case 236:
YY_RULE_SETUP
#line 284 "pmysql.l"
{ return yytext[0]; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 286 "pmysql.l"
{ return ANDOP; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 287 "pmysql.l"
{ return OR; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 289 "pmysql.l"
{ yylval.subtok = 4; return COMPARISON; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 290 "pmysql.l"
{ yylval.subtok = 6; return COMPARISON; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 291 "pmysql.l"
{ yylval.subtok = 2; return COMPARISON; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 292 "pmysql.l"
{ yylval.subtok = 5; return COMPARISON; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 293 "pmysql.l"
{ yylval.subtok = 1; return COMPARISON; }
	YY_BREAK
case 244:
#line 295 "pmysql.l"
case 245:
YY_RULE_SETUP
#line 295 "pmysql.l"
{ yylval.subtok = 3; return COMPARISON; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 297 "pmysql.l"
{ yylval.subtok = 1; return SHIFT; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 298 "pmysql.l"
{ yylval.subtok = 2; return SHIFT; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 300 "pmysql.l"
{ return ASSIGN; }
	YY_BREAK
/* functions */
case 249:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 303 "pmysql.l"
{ return FSUBSTRING; }
	YY_BREAK
case 250:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 304 "pmysql.l"
{ return FTRIM; }
	YY_BREAK
case 251:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 305 "pmysql.l"
{ return FDATE_ADD; }
	YY_BREAK
case 252:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 8;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 306 "pmysql.l"
{ return FDATE_SUB; }
	YY_BREAK
/* check trailing context manually */
case 253:
YY_RULE_SETUP
#line 309 "pmysql.l"
{ // int c = input(); unput(c);
           // if(c == '(') return FCOUNT;
           yylval.strval = strdup(yytext);
           return NAME; }
	YY_BREAK
/* names */
case 254:
YY_RULE_SETUP
#line 315 "pmysql.l"
{ yylval.strval = strdup(yytext);
                          return NAME; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 318 "pmysql.l"
{ yylval.strval = strdup(yytext+1);
                          yylval.strval[yyleng-2] = 0;
                          return NAME; }
	YY_BREAK
case 256:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 322 "pmysql.l"
{ yyerror("unterminated quoted name %s", yytext); }
	YY_BREAK
/* user variables */
case 257:
#line 326 "pmysql.l"
case 258:
#line 327 "pmysql.l"
case 259:
#line 328 "pmysql.l"
case 260:
YY_RULE_SETUP
#line 328 "pmysql.l"
{ yylval.strval = strdup(yytext+1); return USERVAR; }
	YY_BREAK
case 261:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 330 "pmysql.l"
case 262:
#line 331 "pmysql.l"
case 263:
#line 332 "pmysql.l"
{ yyerror("unterminated quoted user variable %s", yytext); }
	YY_BREAK
/* comments */   
case 264:
YY_RULE_SETUP
#line 335 "pmysql.l"
;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 336 "pmysql.l"
;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 338 "pmysql.l"
{ oldstate = YY_START; BEGIN COMMENT; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 339 "pmysql.l"
{ BEGIN oldstate; }
	YY_BREAK
case 268:
/* rule 268 can match eol */
YY_RULE_SETUP
#line 340 "pmysql.l"
;
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 341 "pmysql.l"
{ yyerror("unclosed comment"); }
	YY_BREAK
/* everything else */
case 269:
/* rule 269 can match eol */
YY_RULE_SETUP
#line 344 "pmysql.l"
/* whitespace */
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 345 "pmysql.l"
{ yyerror("mystery character '%c'", *yytext); }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 347 "pmysql.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 3365 "pmysql.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(BTWMODE):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1186 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1186 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (flex_int16_t) yy_c];
	yy_is_jam = (yy_current_state == 1185);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,(int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 347 "pmysql.l"




void
yyerror(char *s, ...)
{
  va_list ap;
  va_start(ap, s);

  vfprintf(stderr, s, ap);
  fprintf(stderr, "\n");
}

